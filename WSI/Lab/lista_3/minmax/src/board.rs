pub const BOARD_SIZE: usize = 5;

static mut BOARD: [[u8; BOARD_SIZE]; BOARD_SIZE] = [[0; BOARD_SIZE]; BOARD_SIZE];

const WIN: [[[usize; 2]; 4]; 28] = [
    [[0, 0], [0, 1], [0, 2], [0, 3]],
    [[1, 0], [1, 1], [1, 2], [1, 3]],
    [[2, 0], [2, 1], [2, 2], [2, 3]],
    [[3, 0], [3, 1], [3, 2], [3, 3]],
    [[4, 0], [4, 1], [4, 2], [4, 3]],
    [[0, 1], [0, 2], [0, 3], [0, 4]],
    [[1, 1], [1, 2], [1, 3], [1, 4]],
    [[2, 1], [2, 2], [2, 3], [2, 4]],
    [[3, 1], [3, 2], [3, 3], [3, 4]],
    [[4, 1], [4, 2], [4, 3], [4, 4]],
    [[0, 0], [1, 0], [2, 0], [3, 0]],
    [[0, 1], [1, 1], [2, 1], [3, 1]],
    [[0, 2], [1, 2], [2, 2], [3, 2]],
    [[0, 3], [1, 3], [2, 3], [3, 3]],
    [[0, 4], [1, 4], [2, 4], [3, 4]],
    [[1, 0], [2, 0], [3, 0], [4, 0]],
    [[1, 1], [2, 1], [3, 1], [4, 1]],
    [[1, 2], [2, 2], [3, 2], [4, 2]],
    [[1, 3], [2, 3], [3, 3], [4, 3]],
    [[1, 4], [2, 4], [3, 4], [4, 4]],
    [[0, 1], [1, 2], [2, 3], [3, 4]],
    [[0, 0], [1, 1], [2, 2], [3, 3]],
    [[1, 1], [2, 2], [3, 3], [4, 4]],
    [[1, 0], [2, 1], [3, 2], [4, 3]],
    [[0, 3], [1, 2], [2, 1], [3, 0]],
    [[0, 4], [1, 3], [2, 2], [3, 1]],
    [[1, 3], [2, 2], [3, 1], [4, 0]],
    [[1, 4], [2, 3], [3, 2], [4, 1]],
];

const LOSE: [[[usize; 2]; 3]; 48] = [
    [[0, 0], [0, 1], [0, 2]], [[0, 1], [0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4]],
    [[1, 0], [1, 1], [1, 2]], [[1, 1], [1, 2], [1, 3]], [[1, 2], [1, 3], [1, 4]],
    [[2, 0], [2, 1], [2, 2]], [[2, 1], [2, 2], [2, 3]], [[2, 2], [2, 3], [2, 4]],
    [[3, 0], [3, 1], [3, 2]], [[3, 1], [3, 2], [3, 3]], [[3, 2], [3, 3], [3, 4]],
    [[4, 0], [4, 1], [4, 2]], [[4, 1], [4, 2], [4, 3]], [[4, 2], [4, 3], [4, 4]],
    [[0, 0], [1, 0], [2, 0]], [[1, 0], [2, 0], [3, 0]], [[2, 0], [3, 0], [4, 0]],
    [[0, 1], [1, 1], [2, 1]], [[1, 1], [2, 1], [3, 1]], [[2, 1], [3, 1], [4, 1]],
    [[0, 2], [1, 2], [2, 2]], [[1, 2], [2, 2], [3, 2]], [[2, 2], [3, 2], [4, 2]],
    [[0, 3], [1, 3], [2, 3]], [[1, 3], [2, 3], [3, 3]], [[2, 3], [3, 3], [4, 3]],
    [[0, 4], [1, 4], [2, 4]], [[1, 4], [2, 4], [3, 4]], [[2, 4], [3, 4], [4, 4]],
    [[0, 2], [1, 3], [2, 4]], [[0, 1], [1, 2], [2, 3]], [[1, 2], [2, 3], [3, 4]],
    [[0, 0], [1, 1], [2, 2]], [[1, 1], [2, 2], [3, 3]], [[2, 2], [3, 3], [4, 4]],
    [[1, 0], [2, 1], [3, 2]], [[2, 1], [3, 2], [4, 3]], [[2, 0], [3, 1], [4, 2]],
    [[0, 2], [1, 1], [2, 0]], [[0, 3], [1, 2], [2, 1]], [[1, 2], [2, 1], [3, 0]],
    [[0, 4], [1, 3], [2, 2]], [[1, 3], [2, 2], [3, 1]], [[2, 2], [3, 1], [4, 0]],
    [[1, 4], [2, 3], [3, 2]], [[2, 3], [3, 2], [4, 1]], [[2, 4], [3, 3], [4, 2]],
];


pub fn set_board() {
    for i in 0..BOARD_SIZE {
        for j in 0..BOARD_SIZE {
            unsafe {
                BOARD[i][j] = 0;
            }
        }
    }
}

pub fn print_board() {
    print!(" 1 2 3 4 5\n");
    for i in 0..BOARD_SIZE {
        print!("{}\n", i + 1);
        for j in 0..BOARD_SIZE {
            match unsafe {BOARD[i][j]} {
                0 => print!(" . "),
                1 => print!(" X "),
                2 => print!(" O "),
                _ => print!(" ? "),
            }
        }
    }    
}

pub fn set_move(mv: usize, player: usize) -> bool {
    let i = (mv / 10) as isize - 1;
    let j = (mv % 10) as isize - 1;

    if i < 0 || i > 4 as isize || j < 0 || j >= BOARD_SIZE as isize {
        return false;
    }

    let (i, j) = (i as usize, j as usize);

    unsafe {
        if BOARD[i][j] != 0 {
            return false;
        }
        BOARD[i][j] = player as u8;
    }

    return true
}


fn win_check(board: &[[u8; 5]; 5]) -> (bool, u8) {
    for line in WIN.iter() {
        let val = board[line[0][0]][line[0][1]];
        if val != 0 &&
            val == board[line[1][0]][line[1][1]] &&
            val == board[line[2][0]][line[2][1]] &&
            val == board[line[3][0]][line[3][1]] {
            return (true, val);
        }
    }
    (false, 0)
}

fn lose_check(board: &[[u8; 5]; 5]) -> (bool, u8) {
    for line in LOSE.iter() {
        let val = board[line[0][0]][line[0][1]];
        if val != 0 &&
            val == board[line[1][0]][line[1][1]] &&
            val == board[line[2][0]][line[2][1]] {
            return (true, val);
        }
    }
    (false, 0)
}

fn draw_check(board: &[[u8; 5]; 5]) -> (bool, u8) {
    for row in board.iter() {
        for &cell in row.iter() {
            if cell == 0 {
                return (false, 0);
            }
        }
    }
    (true, 0)
}
